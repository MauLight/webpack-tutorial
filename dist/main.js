(() => { "use strict"; const e = (...e) => e.every((e => "number" == typeof e && !isNaN(e))); var t, n; t = new class { constructor() { this.errorBox = document.getElementById("error") } handleAdditionError(t, n) { const s = t.reduce(((t, s, r) => e(n[r]) ? t + "" : t + `${s} is not a number. `), "Please, enter two valid numbers! "); this.errorBox.classList.remove("invisible"), this.errorBox.innerText = s } hideErrors() { this.errorBox.classList.add("invisible") } }, n = new class { constructor() { this.numberOneInput = document.getElementById("numberOne"), this.numberTwoInput = document.getElementById("numberTwo"), this.addValuesButton = document.getElementById("addValue"), this.resultDiv = document.getElementById("result") } getInputs() { return console.log(this.numberOneInput.value, this.numberTwoInput.value), [this.numberOneInput.value, this.numberTwoInput.value] } setResults(e) { this.resultDiv.innerText = e } onClick(e) { this.addValuesButton.addEventListener("click", e) } }, console.log("Hey"), t.hideErrors(), n.onClick((() => { t.hideErrors(); const s = n.getInputs(), r = ((...e) => e.map((e => parseInt(e))))(...s); if (e(...r)) { const [e, t] = r; console.log(e, t), n.setResults(e + t) } else n.setResults(""), t.handleAdditionError(s, r) })) })();